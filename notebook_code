import pandas as pd
import numpy as np
import time 
import matplotlib.pyplot as plt
import seaborn as sns
Load Dataset
i = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSs305meGwaQX1xB21gXOAUdS962_SgvhBRx0vZMbu9IR_o9IRBEpwT2NI-636LsbvVkMi3tWrtYbUe/pub?gid=0&single=true&output=csv')
IWN = i['IWN_close']
QQQ = i['QQQ_close']
TLT = i['TLT_close']
SPY = i['SPY_close']
month = i['month']
Functions for calculating period returns
def monthly_returns(shares_record,close_dataset,initial = [i*1000 for i in range(1,241)]):
  return map(lambda x,y,z: ((x * y) - z) / z, shares_record,close_dataset,initial)

def yearly_returns(shares_record,close_dataset,initial = [i*1000 for i in range(1,241)]):
  return map(lambda x,y,z: ((x * y) - z) / z, shares_record[11::12],close_dataset[11::12],initial[11::12])

def quarterly_returns(shares_record,close_dataset,initial = [i*1000 for i in range(1,241)]):
  return map(lambda x,y,z: ((x * y) - z) / z, shares_record[2::3],close_dataset[2::3],initial[2::3])

Buy-Hold single asset
class bh_strat:

  def __init__(self, input):
    self.monthly_shares = []
    self.month = 0
    self.input = input
    self.total_shares = 0

  def bh(self, i):
    while self.month <= 239:
      shares = self.input / i[self.month]
      self.total_shares += shares
      self.monthly_shares.append(self.total_shares)
      self.month += 1
    return self.monthly_shares
bh_single_asset = {}

assets =[IWN,QQQ,TLT,SPY]

asset_name = ["IWN","QQQ","TLT","SPY"]

for n,i in enumerate(assets):
  bh_single_asset[asset_name[n]] = bh_strat(input=1000).bh(i=assets[n])

Results
bh_monthly_return_rate = {}
bh_yearly_return_rate = {}
bh_quarterly_return_rate = {}
bh_total_returns = {}

for n in [0,1,2,3]:
  bh_monthly_return_rate[asset_name[n]] = list(monthly_returns(bh_single_asset[asset_name[n]],assets[n]))

for n in [0,1,2,3]:
  bh_yearly_return_rate[asset_name[n]] = list(yearly_returns(bh_single_asset[asset_name[n]],assets[n]))

for n in [0,1,2,3]:
  bh_quarterly_return_rate[asset_name[n]] = list(quarterly_returns(bh_single_asset[asset_name[n]],assets[n]))

for n in [0,1,2,3]:
  bh_total_returns[asset_name[n]] = list(map(lambda x,y: x*y ,bh_single_asset[asset_name[n]],assets[n]))
for n in [0,1,2,3]:
  print('{} return: {}'.format(asset_name[n], bh_total_returns[asset_name[n]][-1]))

print()
for n in [0,1,2,3]:
  print('{} rate of return: {}'.format(asset_name[n], bh_total_returns[asset_name[n]][-1]/(240*1000)))
Buy-Hold mixed (of "IWN","QQQ","TLT", and "SPY")
bh_mixed_asset = {}

assets =[IWN,QQQ,TLT,SPY]

for n,i in enumerate(assets):
  bh_mixed_asset[asset_name[n]] = bh_strat(input=250).bh(i=assets[n])
Results


bh_mixed_return = {}

for n in [0,1,2,3]:
  bh_mixed_return[asset_name[n]] = map(lambda x, y: x*y, assets[n], bh_mixed_asset[asset_name[n]])

total_mixed_return = [sum(i) for i in zip(bh_mixed_return["IWN"],bh_mixed_return["QQQ"],bh_mixed_return["TLT"],bh_mixed_return["SPY"])]

print('mixed return: {}'.format(total_mixed_return[-1]))
print()
print('mixed rate of return: {}'.format(total_mixed_return[-1]/(240*1000)))
mixed_monthly_returns = list(map(lambda x,y: (x-y)/y, total_mixed_return,[i*1000 for i in range(1,241)]))
mixed_yearly_returns = list(map(lambda x,y: (x-y)/y, total_mixed_return[11::12],[i*1000 for i in range(12,241,12)]))
mixed_quarterly_returns = list(map(lambda x,y: (x-y)/y, total_mixed_return[2::3],[i*1000 for i in range(3,240,3)]))
save results
pd.DataFrame(bh_total_returns).to_csv("/content/drive/MyDrive/bh_total_returns.csv")
pd.DataFrame(total_mixed_return).to_csv("/content/drive/MyDrive/total_mixed_return.csv")
pd.DataFrame(bh_monthly_return_rate).to_csv("/content/drive/MyDrive/bh_monthly_return_rate.csv")
pd.DataFrame(mixed_monthly_returns).to_csv("/content/drive/MyDrive/mixed_monthly_return.csv")
Maxdrawdown for all Buy-Hold
for n in [0,1,2,3]:
  window = 12
  returns = pd.DataFrame(bh_total_returns[asset_name[n]])
  rolling_max = returns.rolling(window,min_periods=1).max()
  monthly_dd = returns/rolling_max - 1
  dd = monthly_dd.rolling(window, min_periods=1).min()
  print('Max Drawdown {}: {}'.format(asset_name[n], dd.describe()[0][3]))
  plt.plot(monthly_dd)
  plt.plot(dd)
  plt.show()
window = 12
returns = pd.DataFrame(total_mixed_return)
rolling_max = returns.rolling(window,min_periods=1).max()
monthly_dd = returns/rolling_max - 1
dd = monthly_dd.rolling(window, min_periods=1).min()
print('Max Drawdown mixed: {}'.format(dd.describe()[0][3]))
plt.plot(monthly_dd)
plt.plot(dd)
plt.show()
Buy-Hold Plot
fig, ax = plt.subplots(figsize=(10,8))
for n in asset_name:
  sns.lineplot(data= np.array(bh_total_returns[n])/1000, label = n + " (100%)", lw = 1)
sns.lineplot(data= np.array(total_mixed_return)/1000, label = "mixed (25% each)", lw = 1)
plt.title("Buy-Hold Cumulative Returns Over 240 Months",size = 15)
plt.ylabel("$ (thousands)", fontsize=15)
plt.xlabel("Months", fontsize=15)
plt.legend()
plt.show()
Constant Mix
class cm_strat:

  def __init__(self,input):
    self.month = 0
    self.input = input
    self.bond_shares = 0
    self.stock_shares = 0
    self.bond_record = list()
    self.stock_record = list()

  def cm(self, bond, stock, stock_percent):
    while self.month <= 239:
      #print("MONTH:", month)
      self.bond_shares += (self.input*(1-stock_percent)) / bond[self.month]
      self.stock_shares += (self.input*stock_percent) / stock[self.month]
      #print("injection: bond shares: {}, stock shares: {}".format(bond_shares, stock_shares))
      #time.sleep(1)
      stock_money = self.stock_shares * stock[self.month]
      bond_money = self.bond_shares * bond[self.month]
      total_money = stock_money + bond_money
      percent_stock = stock_money / total_money
      rebalance = (percent_stock - stock_percent)* total_money
      #print("initial percent stock: ", percent_stock)
      #print("initial bond shares: {}, stock shares: {}".format(bond_shares, stock_shares))
      #time.sleep(1)
      self.stock_shares -= rebalance  / stock[self.month]
      self.bond_shares += rebalance  / bond[self.month]  
      #print("altered percent stock: {}".format(stock_shares * stock[month]/total_money))
      #print("altered bond shares: {}, stock shares: {}".format(bond_shares, stock_shares))
      #time.sleep(1)
      self.bond_record.append(self.bond_shares)
      self.stock_record.append(self.stock_shares)
      self.month += 1

    return self.bond_record, self.stock_record
results
cm_bond_record = {}
cm_stock_record = {}
cm_total_returns = {}

assets =[IWN,QQQ,SPY]

asset_name = ["IWN","QQQ","SPY"]

for n,i in enumerate(assets):
  cm_bond_record[asset_name[n]],cm_stock_record[asset_name[n]] = cm_strat(input=1000).cm(bond=TLT,stock=assets[n],stock_percent=0.6)

for n in [0,1,2]:
  cm_total_returns[asset_name[n]] = list(map(lambda x, y, z, a : (x*y) + (z*a), assets[n], cm_stock_record[asset_name[n]],cm_bond_record[asset_name[n]],TLT))

#print(cm_total_returns[0][-1],cm_total_returns[1][-1],cm_total_returns[2][-1])
for n in [0,1,2]:
  print('{} return: {}'.format(asset_name[n], cm_total_returns[asset_name[n]][-1]))

print()
for n in [0,1,2]:
  print('{} rate of return: {}'.format(asset_name[n], cm_total_returns[asset_name[n]][-1]/(240*1000)))
cm_monthly_return_rate = {}
cm_yearly_return_rate = {}
cm_quarterly_return_rate = {}

for n in [0,1,2]:
  cm_monthly_return_rate[asset_name[n]] = list(monthly_returns(cm_total_returns[asset_name[n]],assets[n]))

for n in [0,1,2]:
  cm_yearly_return_rate[asset_name[n]] = list(yearly_returns(cm_total_returns[asset_name[n]],assets[n]))

for n in [0,1,2]:
  cm_quarterly_return_rate[asset_name[n]] = list(quarterly_returns(cm_total_returns[asset_name[n]],assets[n]))
Maxdrawdown Constant-Mix
for n in [0,1,2]:
  window = 12
  returns = pd.DataFrame(cm_total_returns[asset_name[n]])
  rolling_max = returns.rolling(window,min_periods=1).max()
  monthly_dd = returns/rolling_max - 1
  dd = monthly_dd.rolling(window, min_periods=1).min()
  print('Max Drawdown {}: {}'.format(asset_name[n], dd.describe()[0][3]))
  plt.plot(monthly_dd)
  plt.plot(dd)
  plt.show()
save results
pd.DataFrame(cm_total_returns).to_csv("/content/drive/MyDrive/cm_total_returns.csv")
pd.DataFrame(cm_monthly_return_rate).to_csv("/content/drive/MyDrive/cm_monthly_return_rate.csv")
Constant-Mix Plot
fig, ax = plt.subplots(figsize=(10,8))
for n in asset_name:
  sns.lineplot(data= np.array(cm_total_returns[n])/1000, label = n + " (60%) / TLT (40%)", lw = 1)
plt.title("Constant Mix Cumulative Returns Over 240 Months",size = 15)
plt.ylabel("$ (thousands)", fontsize=15)
plt.xlabel("Months", fontsize=15)
plt.legend()
plt.show()
